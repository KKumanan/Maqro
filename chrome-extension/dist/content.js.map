{"version":3,"file":"content.js","mappings":"mBAAA,IAAYA,GAAZ,SAAYA,GACV,wBACA,kBACA,gBACA,eACD,CALD,CAAYA,IAAAA,EAAS,KCQrB,MAAMC,EAAS,CACbC,eAAgB,IAChBC,eAAgB,EAChBC,cAAc,EACdC,aAAcC,KAAKC,OA8BrB,SAASC,EAAUC,GACZR,EAAOG,cAKZM,QAAQC,IAAI,uBAAwBF,GACpCG,OAAOC,QAAQC,YAAY,CAAEC,KAAM,aAAcN,UAAUO,IACrDJ,OAAOC,QAAQI,UACjBP,QAAQQ,MAAM,6BAA8BN,OAAOC,QAAQI,WAE3DP,QAAQC,IAAI,iCAAkCK,EAChD,KAVAN,QAAQC,IAAI,oCAYhB,CAwBAQ,SAASC,iBAAiB,SAAUC,IAClC,MAAMC,EAASD,EAAEC,OAjEnB,IAA4BC,EA2E1Bf,EAT0B,CACxBgB,WAAYxB,EAAUyB,MACtBC,IAAKC,OAAOC,SAASC,KACrBC,UArEwBP,EAqEKD,EApE3BC,EAAQQ,GACH,IAAIR,EAAQQ,KAGjBR,EAAQS,UAAUC,OAAS,EACtB,IAAIC,MAAMC,KAAKZ,EAAQS,WAAWI,KAAK,OAG5Cb,EAAQc,aAAa,QAChB,WAAWd,EAAQc,aAAa,YAGlCd,EAAQe,QAAQC,eAyDrBC,EAAGnB,EAAEoB,QACLC,EAAGrB,EAAEsB,QACLC,WAAW,IAAItC,MAAOuC,eAGR,IAIlB1B,SAASC,iBAAiB,UAAWC,IACnC,MAAMd,EAAMD,KAAKC,MACbA,EAAMN,EAAOE,eAAiBF,EAAOC,iBACzCD,EAAOE,eAAiBI,EASxBC,EAP2B,CACzBgB,WAAYxB,EAAU8C,OACtBpB,IAAKC,OAAOC,SAASC,KACrBkB,QAASpB,OAAOoB,QAChBH,WAAW,IAAItC,MAAOuC,gBAGR,IAIlBlB,OAAOP,iBAAiB,SAAS,KAQ/BZ,EAP0B,CACxBgB,WAAYxB,EAAUgD,MACtBtB,IAAKC,OAAOC,SAASC,KACrBoB,MAAO,QACPL,WAAW,IAAItC,MAAOuC,eAGR,IAGlBlB,OAAOP,iBAAiB,QAAQ,KAQ9BZ,EAP0B,CACxBgB,WAAYxB,EAAUgD,MACtBtB,IAAKC,OAAOC,SAASC,KACrBoB,MAAO,OACPL,WAAW,IAAItC,MAAOuC,eAGR,IAIlBjC,OAAOC,QAAQqC,UAAUC,aAAY,CAACC,EAAkBC,EAAaC,K,MACnE5C,QAAQC,IAAI,0BAA2ByC,GAElB,sBAAjBA,EAAQrC,OACVd,EAAOG,aAA8B,QAAf,EAAAgD,EAAQG,eAAO,SACrC7C,QAAQC,IAAI,qCAAsCV,EAAOG,cACzDkD,EAAa,CAAEE,SAAS,IAC1B,IAIF9C,QAAQC,IAAI,gCAtFZ,WACED,QAAQC,IAAI,6BACZ,MAAMF,EAAuB,CAC3Be,WAAYxB,EAAUyD,UACtB/B,IAAKC,OAAOC,SAASC,KACrB6B,MAAOvC,SAASuC,MAChBC,SAAU,EACVf,WAAW,IAAItC,MAAOuC,eAGxBrC,EAAUC,GAGVkB,OAAOP,iBAAiB,gBAAgB,KACtC,MAAMuC,EAAWC,KAAKC,OAAOvD,KAAKC,MAAQN,EAAOI,cAAgB,KACjEI,EAAMkD,SAAWA,EACjBnD,EAAUC,EAAM,GAEpB,CAqEAqD,E","sources":["webpack://macro-engine-activity-tracker/./src/types.ts","webpack://macro-engine-activity-tracker/./src/content.ts"],"sourcesContent":["export enum EventType {\n  PAGE_VIEW = 'page_view',\n  SCROLL = 'scroll',\n  CLICK = 'click',\n  FOCUS = 'focus'\n}\n\nexport interface BaseEvent {\n  event_type: EventType;\n  url: string;\n  timestamp: string;\n}\n\nexport interface PageViewEvent extends BaseEvent {\n  event_type: EventType.PAGE_VIEW;\n  title: string;\n  duration: number;\n}\n\nexport interface ScrollEvent extends BaseEvent {\n  event_type: EventType.SCROLL;\n  scrollY: number;\n}\n\nexport interface ClickEvent extends BaseEvent {\n  event_type: EventType.CLICK;\n  selector: string;\n  x: number;\n  y: number;\n}\n\nexport interface FocusEvent extends BaseEvent {\n  event_type: EventType.FOCUS;\n  state: 'focus' | 'blur';\n}\n\nexport type UserEvent = \n  | PageViewEvent \n  | ScrollEvent \n  | ClickEvent \n  | FocusEvent;\n\nexport interface Message {\n  type: string;\n  event?: UserEvent;\n  enabled?: boolean;\n}","import { UserEvent, EventType, ClickEvent, ScrollEvent, FocusEvent, PageViewEvent, Message } from './types';\n\n/**\n * Content script - runs in the context of web pages\n * Responsible for tracking user interactions and sending them to the background script\n */\n\n// Configuration for event collection\nconst config = {\n  scrollThrottle: 100, // ms\n  lastScrollTime: 0,\n  isCollecting: true,\n  pageLoadTime: Date.now()\n};\n\n// Helper to get element selector\nfunction getElementSelector(element: Element): string {\n  if (element.id) {\n    return `#${element.id}`;\n  }\n  \n  if (element.classList.length > 0) {\n    return `.${Array.from(element.classList).join('.')}`;\n  }\n  \n  if (element.getAttribute('href')) {\n    return `[href*=\"${element.getAttribute('href')}\"]`;\n  }\n  \n  return element.tagName.toLowerCase();\n}\n\n// Helper to create event object\nfunction createEvent<T extends UserEvent>(event: T): T {\n  return {\n    ...event,\n    url: window.location.href,\n    timestamp: new Date().toISOString()\n  };\n}\n\n// Helper to send event to background script\nfunction sendEvent(event: UserEvent) {\n  if (!config.isCollecting) {\n    console.log('Maqro: Event collection is paused');\n    return;\n  }\n  \n  console.log('Maqro: Sending event', event);\n  chrome.runtime.sendMessage({ type: 'USER_EVENT', event }, (response) => {\n    if (chrome.runtime.lastError) {\n      console.error('Maqro: Error sending event', chrome.runtime.lastError);\n    } else {\n      console.log('Maqro: Event sent successfully', response);\n    }\n  });\n}\n\n// Page view tracking\nfunction trackPageView() {\n  console.log('Maqro: Tracking page view');\n  const event: PageViewEvent = {\n    event_type: EventType.PAGE_VIEW,\n    url: window.location.href,\n    title: document.title,\n    duration: 0,\n    timestamp: new Date().toISOString()\n  };\n  \n  sendEvent(event);\n  \n  // Update duration when page is unloaded\n  window.addEventListener('beforeunload', () => {\n    const duration = Math.floor((Date.now() - config.pageLoadTime) / 1000);\n    event.duration = duration;\n    sendEvent(event);\n  });\n}\n\n// Click event listener\ndocument.addEventListener('click', (e: MouseEvent) => {\n  const target = e.target as Element;\n  const event: ClickEvent = {\n    event_type: EventType.CLICK,\n    url: window.location.href,\n    selector: getElementSelector(target),\n    x: e.clientX,\n    y: e.clientY,\n    timestamp: new Date().toISOString()\n  };\n  \n  sendEvent(event);\n});\n\n// Scroll event listener (throttled)\ndocument.addEventListener('scroll', (e: Event) => {\n  const now = Date.now();\n  if (now - config.lastScrollTime < config.scrollThrottle) return;\n  config.lastScrollTime = now;\n  \n  const event: ScrollEvent = {\n    event_type: EventType.SCROLL,\n    url: window.location.href,\n    scrollY: window.scrollY,\n    timestamp: new Date().toISOString()\n  };\n  \n  sendEvent(event);\n});\n\n// Focus/blur listeners\nwindow.addEventListener('focus', () => {\n  const event: FocusEvent = {\n    event_type: EventType.FOCUS,\n    url: window.location.href,\n    state: 'focus',\n    timestamp: new Date().toISOString()\n  };\n  \n  sendEvent(event);\n});\n\nwindow.addEventListener('blur', () => {\n  const event: FocusEvent = {\n    event_type: EventType.FOCUS,\n    url: window.location.href,\n    state: 'blur',\n    timestamp: new Date().toISOString()\n  };\n  \n  sendEvent(event);\n});\n\n// Listen for messages from background script\nchrome.runtime.onMessage.addListener((message: Message, sender: any, sendResponse: (response: any) => void) => {\n  console.log('Maqro: Received message', message);\n  \n  if (message.type === 'TOGGLE_COLLECTION') {\n    config.isCollecting = message.enabled ?? false;\n    console.log('Maqro: Collection state changed to', config.isCollecting);\n    sendResponse({ success: true });\n  }\n});\n\n// Initialize\nconsole.log('Maqro: Content script loaded');\ntrackPageView();\n"],"names":["EventType","config","scrollThrottle","lastScrollTime","isCollecting","pageLoadTime","Date","now","sendEvent","event","console","log","chrome","runtime","sendMessage","type","response","lastError","error","document","addEventListener","e","target","element","event_type","CLICK","url","window","location","href","selector","id","classList","length","Array","from","join","getAttribute","tagName","toLowerCase","x","clientX","y","clientY","timestamp","toISOString","SCROLL","scrollY","FOCUS","state","onMessage","addListener","message","sender","sendResponse","enabled","success","PAGE_VIEW","title","duration","Math","floor","trackPageView"],"sourceRoot":""}