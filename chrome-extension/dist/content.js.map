{"version":3,"file":"content.js","mappings":"mBAEA,IAAYA,GAAZ,SAAYA,GACV,wBACA,gBACA,kBACA,eACD,CALD,CAAYA,IAAAA,EAAS,KCCjBC,OAAOC,yBACTC,QAAQC,KAAK,wCAEbH,OAAOC,0BAA2B,EAIpC,WACE,MAAMG,EAAsB,GAC5B,IAAIC,GAAe,EAGnB,SAASC,EAAIC,GACXL,QAAQI,IAAI,SAAUC,EACxB,CAYA,SAASC,EAASC,GACXJ,IAELD,EAAOM,KAAKD,GACZH,EAAI,mBAAmBG,EAAME,eAAeP,EAAOQ,iBAG/CR,EAAOQ,QAAU,IACnBC,IAEJ,CAGA,SAASA,IACP,GAAsB,IAAlBT,EAAOQ,OAAc,OAEzB,MAAME,EAAe,IAAIV,GACzBA,EAAOQ,OAAS,EAEhBG,OAAOC,QAAQC,YAAY,CACzBC,KAAM,cACNd,OAAQU,IACNK,IACEJ,OAAOC,QAAQI,WACjBd,EAAI,kBAAkBQ,EAAaF,kBAAkBG,OAAOC,QAAQI,UAAUb,WAE9EH,EAAOiB,WAAWP,IAElBR,EAAI,QAAQQ,EAAaF,6BAC3B,GAEJ,CAcAU,SAASC,iBAAiB,SAAUC,IAClC,MAAMC,EAASD,EAAEC,OAvDnB,IAAqBC,EAwDnBlB,EAAS,CACPG,WAAYZ,EAAU4B,MACtBC,IAAK5B,OAAO6B,SAASC,KACrBC,UA3DiBL,EA2DKD,EA1DpBC,EAAQM,GAAW,IAAIN,EAAQM,KAC/BN,EAAQO,UAAUrB,OAAS,EACtB,IAAIsB,MAAMC,KAAKT,EAAQO,WAAWG,MAAM,EAAG,GAAGC,KAAK,OAErDX,EAAQY,QAAQC,eAuDrBC,EAAGhB,EAAEiB,QACLC,EAAGlB,EAAEmB,QACLC,WAAW,IAAIC,MAAOC,eACtB,IAIJ,IAAIC,EAAiB,EACrBzB,SAASC,iBAAiB,UAAU,KAClC,MAAMyB,EAAMH,KAAKG,MACbA,EAAMD,EAAiB,MAC3BA,EAAiBC,EAEjBxC,EAAS,CACPG,WAAYZ,EAAUkD,OACtBrB,IAAK5B,OAAO6B,SAASC,KACrBoB,QAASlD,OAAOkD,QAChBN,WAAW,IAAIC,MAAOC,gBACtB,IAIJ9C,OAAOuB,iBAAiB,SAAS,KAC/Bf,EAAS,CACPG,WAAYZ,EAAUoD,MACtBvB,IAAK5B,OAAO6B,SAASC,KACrBsB,MAAO,QACPR,WAAW,IAAIC,MAAOC,eACtB,IAGJ9C,OAAOuB,iBAAiB,QAAQ,KAC9Bf,EAAS,CACPG,WAAYZ,EAAUoD,MACtBvB,IAAK5B,OAAO6B,SAASC,KACrBsB,MAAO,OACPR,WAAW,IAAIC,MAAOC,gBAExBjC,GAAY,IAIdE,OAAOC,QAAQqC,UAAUC,aAAY,CAAC/C,EAASgD,EAAQC,KAChC,sBAAjBjD,EAAQW,OACVb,EAAeE,EAAQkD,QACvBnD,EAAI,eAAcD,EAAe,UAAY,aACxCA,GAAcQ,IACnB2C,EAAa,CAAEE,SAAS,IAC1B,IAIFC,YAAY9C,EAAY,KACxBb,OAAOuB,iBAAiB,eAAgBV,GArEtCL,EAAS,CACPG,WAAYZ,EAAU6D,UACtBhC,IAAK5B,OAAO6B,SAASC,KACrB+B,MAAOvC,SAASuC,MAChBC,SAAU,EACVlB,WAAW,IAAIC,MAAOC,gBAoE1BxC,EAAI,6BACN,CAnIEyD,G","sources":["webpack://macro-engine-activity-tracker/./src/types.ts","webpack://macro-engine-activity-tracker/./src/content.ts"],"sourcesContent":["// ==================== EVENT TYPES ====================\n\nexport enum EventType {\n  PAGE_VIEW = 'page_view',\n  CLICK = 'click',\n  SCROLL = 'scroll',\n  FOCUS = 'focus',\n}\n\n// Base event interface\nexport interface BaseEvent {\n  event_type: EventType;\n  url: string;\n  timestamp: string;\n}\n\n// Specific event types\nexport interface PageViewEvent extends BaseEvent {\n  event_type: EventType.PAGE_VIEW;\n  title: string;\n  duration: number;\n}\n\nexport interface ClickEvent extends BaseEvent {\n  event_type: EventType.CLICK;\n  selector: string;\n  x: number;\n  y: number;\n}\n\nexport interface ScrollEvent extends BaseEvent {\n  event_type: EventType.SCROLL;\n  scrollY: number;\n}\n\nexport interface FocusEvent extends BaseEvent {\n  event_type: EventType.FOCUS;\n  state: 'focus' | 'blur';\n}\n\n// Union type for all events\nexport type UserEvent = PageViewEvent | ClickEvent | ScrollEvent | FocusEvent;\n\n// ==================== MESSAGE TYPES ====================\n\nexport interface BaseMessage {\n  type: string;\n}\n\nexport interface UserEventsMessage extends BaseMessage {\n  type: 'USER_EVENTS';\n  events: UserEvent[];\n}\n\nexport interface ToggleCollectionMessage extends BaseMessage {\n  type: 'TOGGLE_COLLECTION';\n  enabled: boolean;\n}\n\nexport interface GetStateMessage extends BaseMessage {\n  type: 'GET_STATE';\n}\n\nexport type Message = UserEventsMessage | ToggleCollectionMessage | GetStateMessage;\n\n// Statistics interface for monitoring extension performance\nexport interface ExtensionStats {\n  totalEventsSent: number;\n  totalEventsDropped: number;\n  sendFailureCount: number;\n  connectionFailures?: number;\n}\n\n// Response interfaces for better type safety\nexport interface HealthCheckResponse {\n  success: boolean;\n  isAlive: boolean;\n}\n\nexport interface OperationalStateResponse {\n  success: boolean;\n  isCollecting: boolean;\n  stats: ExtensionStats;\n}\n\nexport interface ToggleCollectionResponse {\n  success: boolean;\n  isCollecting: boolean;\n}\n\n// Global window extension for content script guard\ndeclare global {\n  interface Window {\n    maqroContentScriptLoaded?: boolean;\n  }\n}\n\n// Macro related types\nexport interface Macro {\n  id: string;\n  title: string;\n  description: string;\n  pattern: UserEvent[];\n  status: 'pending' | 'approved' | 'rejected';\n}\n\nexport interface MacroResponse {\n  success: boolean;\n  macros: Macro[];\n}","import { UserEvent, EventType } from './types';\n\n// Simple guard against multiple injections\nif (window.maqroContentScriptLoaded) {\n  console.warn('Maqro content script already loaded');\n} else {\n  window.maqroContentScriptLoaded = true;\n  initializeTracker();\n}\n\nfunction initializeTracker() {\n  const events: UserEvent[] = [];\n  let isCollecting = true;\n\n  // Simple logging\n  function log(message: string) {\n    console.log('Maqro:', message);\n  }\n\n  // Simple CSS selector generation\n  function getSelector(element: Element): string {\n    if (element.id) return `#${element.id}`;\n    if (element.classList.length > 0) {\n      return `.${Array.from(element.classList).slice(0, 2).join('.')}`;\n    }\n    return element.tagName.toLowerCase();\n  }\n\n  // Add event to queue\n  function addEvent(event: UserEvent) {\n    if (!isCollecting) return;\n    \n    events.push(event);\n    log(`Event captured: ${event.event_type} (${events.length} total)`);\n    \n    // Send events when we have 10 or more\n    if (events.length >= 10) {\n      sendEvents();\n    }\n  }\n\n  // Send events to background script\n  function sendEvents() {\n    if (events.length === 0) return;\n    \n    const eventsToSend = [...events];\n    events.length = 0; // Clear array\n    \n    chrome.runtime.sendMessage({ \n      type: 'USER_EVENTS', \n      events: eventsToSend \n    }, (response) => {\n      if (chrome.runtime.lastError) {\n        log(`Failed to send ${eventsToSend.length} events: ${chrome.runtime.lastError.message}`);\n        // Put events back if send failed\n        events.unshift(...eventsToSend);\n      } else {\n        log(`Sent ${eventsToSend.length} events successfully`);\n      }\n    });\n  }\n\n  // Track page view\n  function trackPageView() {\n    addEvent({\n      event_type: EventType.PAGE_VIEW,\n      url: window.location.href,\n      title: document.title,\n      duration: 0,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  // Click tracking\n  document.addEventListener('click', (e: MouseEvent) => {\n    const target = e.target as Element;\n    addEvent({\n      event_type: EventType.CLICK,\n      url: window.location.href,\n      selector: getSelector(target),\n      x: e.clientX,\n      y: e.clientY,\n      timestamp: new Date().toISOString()\n    });\n  });\n\n  // Scroll tracking (throttled)\n  let lastScrollTime = 0;\n  document.addEventListener('scroll', () => {\n    const now = Date.now();\n    if (now - lastScrollTime < 1000) return; // Throttle to 1 second\n    lastScrollTime = now;\n    \n    addEvent({\n      event_type: EventType.SCROLL,\n      url: window.location.href,\n      scrollY: window.scrollY,\n      timestamp: new Date().toISOString()\n    });\n  });\n\n  // Focus tracking\n  window.addEventListener('focus', () => {\n    addEvent({\n      event_type: EventType.FOCUS,\n      url: window.location.href,\n      state: 'focus',\n      timestamp: new Date().toISOString()\n    });\n  });\n\n  window.addEventListener('blur', () => {\n    addEvent({\n      event_type: EventType.FOCUS,\n      url: window.location.href,\n      state: 'blur',\n      timestamp: new Date().toISOString()\n    });\n    sendEvents(); // Send immediately on blur\n  });\n\n  // Listen for collection toggle\n  chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.type === 'TOGGLE_COLLECTION') {\n      isCollecting = message.enabled;\n      log(`Collection ${isCollecting ? 'enabled' : 'disabled'}`);\n      if (!isCollecting) sendEvents(); // Send remaining events when stopping\n      sendResponse({ success: true });\n    }\n  });\n\n  // Send events periodically and on page unload\n  setInterval(sendEvents, 30000); // Every 30 seconds\n  window.addEventListener('beforeunload', sendEvents);\n\n  // Start tracking\n  trackPageView();\n  log('Event tracking initialized');\n}\n"],"names":["EventType","window","maqroContentScriptLoaded","console","warn","events","isCollecting","log","message","addEvent","event","push","event_type","length","sendEvents","eventsToSend","chrome","runtime","sendMessage","type","response","lastError","unshift","document","addEventListener","e","target","element","CLICK","url","location","href","selector","id","classList","Array","from","slice","join","tagName","toLowerCase","x","clientX","y","clientY","timestamp","Date","toISOString","lastScrollTime","now","SCROLL","scrollY","FOCUS","state","onMessage","addListener","sender","sendResponse","enabled","success","setInterval","PAGE_VIEW","title","duration","initializeTracker"],"sourceRoot":""}