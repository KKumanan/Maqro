(()=>{"use strict";let e=!0,t=!1;function n(e){console.log("Maqro Background:",e)}async function s(){if(t)n("Already sending, skipping...");else{t=!0;try{const e=(await chrome.storage.local.get("events")).events||[];if(0===e.length)return void n("No events to send");n(`Sending ${e.length} events to server`);const t=await fetch("http://localhost:3000/api/events",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({events:e})});if(!t.ok)throw new Error(`Server responded with ${t.status}`);await chrome.storage.local.remove("events"),n(`Successfully sent ${e.length} events`)}catch(e){n(`Failed to send events: ${e}`)}finally{t=!1}}}chrome.runtime.onMessage.addListener(((t,o,a)=>{switch(t.type){case"USER_EVENTS":t.events&&Array.isArray(t.events)&&(async function(e){try{n(`Received ${e.length} events`);const t=[...(await chrome.storage.local.get("events")).events||[],...e];t.length>1e3&&(t.splice(0,t.length-1e3),n("Trimmed old events to prevent memory overflow")),await chrome.storage.local.set({events:t}),n(`Stored ${t.length} total events`),t.length>=20&&s()}catch(e){n(`Error handling events: ${e}`)}}(t.events),a({success:!0}));break;case"TOGGLE_COLLECTION":e=t.enabled,n("Collection "+(e?"enabled":"disabled")),async function(e){try{const t=await chrome.tabs.query({url:["http://*/*","https://*/*"]});for(const n of t)n.id&&chrome.tabs.sendMessage(n.id,e).catch((()=>{}))}catch(e){n(`Error broadcasting to tabs: ${e}`)}}({type:"TOGGLE_COLLECTION",enabled:e}),e||s(),a({success:!0,isCollecting:e});break;case"GET_STATE":a({success:!0,isCollecting:e})}})),chrome.tabs.onUpdated.addListener(((t,s,o)=>{var a;"complete"!==s.status||!(null===(a=o.url)||void 0===a?void 0:a.startsWith("http"))||o.url.includes("chrome://")||o.url.includes("chrome-extension://")||chrome.scripting.executeScript({target:{tabId:t},files:["content.js"]}).then((()=>{n(`Injected content script into tab ${t}`),setTimeout((()=>{chrome.tabs.sendMessage(t,{type:"TOGGLE_COLLECTION",enabled:e}).catch((()=>{}))}),500)})).catch((()=>{}))})),chrome.runtime.onInstalled.addListener((()=>{n("Extension installed"),e=!0})),chrome.runtime.onStartup.addListener((()=>{n("Extension started"),e=!0})),setInterval(s,6e4),n("Background script initialized")})();
//# sourceMappingURL=background.js.map