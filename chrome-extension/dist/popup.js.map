{"version":3,"file":"popup.js","mappings":"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","sources":["webpack://macro-engine-activity-tracker/./src/popup.ts"],"sourcesContent":["/// <reference types=\"chrome\"/>\n\nimport { UserEvent } from './types';\n\nlet isCollecting = true;\nlet serverConnected = false;\n\n// Simple logging\nfunction log(message: string) {\n  console.log('Maqro Popup:', message);\n}\n\n// Update UI status\nfunction updateStatus(collecting: boolean) {\n  const statusEl = document.getElementById('status')!;\n  const toggleButton = document.getElementById('toggleCollection')!;\n  \n  statusEl.textContent = collecting ? 'Collecting events...' : 'Collection Paused';\n  statusEl.className = `status ${collecting ? 'active' : 'inactive'}`;\n  toggleButton.textContent = collecting ? 'Stop Collection' : 'Start Collection';\n}\n\n// Format timestamp\nfunction formatTime(timestamp: string): string {\n  return new Date(timestamp).toLocaleTimeString();\n}\n\n// Add event to UI\nfunction addEvent(event: UserEvent) {\n  const eventsDiv = document.getElementById('events')!;\n  const eventDiv = document.createElement('div');\n  eventDiv.className = 'event';\n  \n  eventDiv.innerHTML = `\n    <div class=\"event-type\">${event.event_type}</div>\n    <div class=\"event-time\">${formatTime(event.timestamp)}</div>\n    <div class=\"event-url\">${event.url}</div>\n  `;\n  \n  eventsDiv.insertBefore(eventDiv, eventsDiv.firstChild);\n}\n\n// Check server status\nasync function checkServer() {\n  const serverStatusEl = document.getElementById('serverStatus')!;\n  try {\n    const response = await fetch('http://localhost:3000/api/events');\n    serverConnected = response.ok;\n    serverStatusEl.textContent = serverConnected ? 'Server: Connected' : 'Server: Error';\n    serverStatusEl.className = `server-status ${serverConnected ? 'connected' : 'disconnected'}`;\n  } catch (error) {\n    serverConnected = false;\n    serverStatusEl.textContent = 'Server: Disconnected';\n    serverStatusEl.className = 'server-status disconnected';\n  }\n}\n\n// Fetch and display events\nasync function loadEvents() {\n  const eventsDiv = document.getElementById('events')!;\n  \n  if (!serverConnected) {\n    eventsDiv.textContent = 'Server disconnected. Cannot load events.';\n    return;\n  }\n\n  try {\n    const response = await fetch('http://localhost:3000/api/events');\n    if (!response.ok) throw new Error(`HTTP ${response.status}`);\n    \n    const data = await response.json();\n    eventsDiv.innerHTML = ''; // Clear existing events\n    \n    if (data.events && data.events.length > 0) {\n      data.events.slice(0, 50).forEach((event: UserEvent) => addEvent(event)); // Show only last 50\n    } else {\n      eventsDiv.textContent = 'No events to display.';\n    }\n  } catch (error) {\n    log(`Failed to load events: ${error}`);\n    eventsDiv.textContent = 'Failed to load events.';\n  }\n}\n\n// Clear all events\nasync function clearEvents() {\n  if (!serverConnected) {\n    alert('Cannot clear events: Server is not connected');\n    return;\n  }\n\n  try {\n    const response = await fetch('http://localhost:3000/api/events', { method: 'DELETE' });\n    if (!response.ok) throw new Error(`HTTP ${response.status}`);\n    \n    document.getElementById('events')!.innerHTML = 'No events to display.';\n    log('Events cleared');\n  } catch (error) {\n    log(`Failed to clear events: ${error}`);\n    alert('Failed to clear events. Please try again.');\n  }\n}\n\n// Toggle collection\nfunction toggleCollection() {\n  const newState = !isCollecting;\n  \n  chrome.runtime.sendMessage({ \n    type: 'TOGGLE_COLLECTION', \n    enabled: newState \n  }, (response) => {\n    if (chrome.runtime.lastError) {\n      log(`Toggle failed: ${chrome.runtime.lastError.message}`);\n      return;\n    }\n    \n    if (response && response.success && typeof response.isCollecting === 'boolean') {\n      isCollecting = response.isCollecting;\n      updateStatus(isCollecting);\n      log(`Collection ${isCollecting ? 'enabled' : 'disabled'}`);\n    } else {\n      // Fallback: just update with the state we tried to set\n      isCollecting = newState;\n      updateStatus(isCollecting);\n      log(`Collection ${isCollecting ? 'enabled' : 'disabled'} (fallback)`);\n    }\n  });\n}\n\n// Initialize popup\ndocument.addEventListener('DOMContentLoaded', () => {\n  const toggleButton = document.getElementById('toggleCollection')!;\n  const clearButton = document.getElementById('clearEvents')!;\n\n  // Get initial state from background\n  chrome.runtime.sendMessage({ type: 'GET_STATE' }, (response) => {\n    if (response && response.success) {\n      isCollecting = response.isCollecting;\n      updateStatus(isCollecting);\n    }\n  });\n\n  // Set up event listeners\n  toggleButton.addEventListener('click', toggleCollection);\n  clearButton.addEventListener('click', clearEvents);\n  \n  // Initial load\n  checkServer().then(() => {\n    if (serverConnected) {\n      loadEvents();\n    }\n  });\n  \n  // Refresh every 30 seconds (reduced from 10)\n  setInterval(() => {\n    checkServer().then(() => {\n      if (serverConnected) {\n        loadEvents();\n      }\n    });\n  }, 30000);\n});\n\nlog('Popup initialized');\n"],"names":["isCollecting","serverConnected","log","message","console","updateStatus","collecting","statusEl","document","getElementById","toggleButton","textContent","className","async","checkServer","serverStatusEl","response","fetch","ok","error","loadEvents","eventsDiv","Error","status","data","json","innerHTML","events","length","slice","forEach","event","eventDiv","createElement","timestamp","event_type","Date","toLocaleTimeString","url","insertBefore","firstChild","addEvent","clearEvents","method","alert","toggleCollection","newState","chrome","runtime","sendMessage","type","enabled","lastError","success","addEventListener","clearButton","then","setInterval"],"sourceRoot":""}