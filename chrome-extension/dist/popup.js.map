{"version":3,"file":"popup.js","mappings":"mBAEA,IAAIA,GAAe,EACfC,EAAe,WAkCnBC,eAAeC,IACb,IAEE,WADuBC,MAAM,qCAChBC,GAKX,MAAM,IAAIC,MAAM,+BAJhBL,EAAe,YACfM,SAASC,eAAe,gBAAiBC,YAAc,oBACvDF,SAASC,eAAe,gBAAiBE,UAAY,yBAIzD,CAAE,MAAOC,GACPV,EAAe,eACfM,SAASC,eAAe,gBAAiBC,YAAc,uBACvDF,SAASC,eAAe,gBAAiBE,UAAY,6BACrDE,QAAQD,MAAM,2BAA4BA,EAC5C,CACF,CAGAT,eAAeW,IACb,GAAqB,cAAjBZ,UACIE,IACe,cAAjBF,GAGN,IACE,MAAMa,QAAiBV,MAAM,oCACvBW,QAAaD,EAASE,OAEVT,SAASC,eAAe,UAChCS,UAAY,GAEtBF,EAAKG,OAAOC,SAASC,GA/CzB,SAAkBA,GAChB,MAAMC,EAAYd,SAASC,eAAe,UACpCc,EAAWf,SAASgB,cAAc,OAP1C,IAAoBC,EAQlBF,EAASZ,UAAY,QAErBY,EAASL,UAAY,iCACOG,EAAMK,iDAXhBD,EAYqBJ,EAAMI,UAXtC,IAAIE,KAAKF,GAAWG,0DAYAP,EAAMQ,gBAGjCP,EAAUQ,aAAaP,EAAUD,EAAUS,WAC7C,CAmC8CC,CAASX,IACrD,CAAE,MAAOT,GACPC,QAAQD,MAAM,yBAA0BA,GACxCV,EAAe,eACfM,SAASC,eAAe,gBAAiBC,YAAc,uBACvDF,SAASC,eAAe,gBAAiBE,UAAY,4BACvD,CACF,CAGAR,eAAe8B,IACb,GAAqB,cAAjB/B,UACIE,IACe,cAAjBF,GAMN,IAKE,WAJuBG,MAAM,mCAAoC,CAC/D6B,OAAQ,YAGI5B,GACZ,MAAM,IAAIC,MAAM,0BAGAC,SAASC,eAAe,UAChCS,UAAY,EACxB,CAAE,MAAON,GACPC,QAAQD,MAAM,yBAA0BA,GACxCuB,MAAM,4CACR,MAnBIA,MAAM,+CAoBZ,CAGA3B,SAAS4B,iBAAiB,oBAAoB,KAE5C,MAAMC,EAAY7B,SAASgB,cAAc,OACzCa,EAAUC,GAAK,eACfD,EAAU1B,UAAY,yBACtB0B,EAAU3B,YAAc,sBACxBF,SAAS+B,KAAKT,aAAaO,EAAW7B,SAAS+B,KAAKR,YAGpDvB,SAASC,eAAe,oBAAqB2B,iBAAiB,SAAS,KACrE,MAAMI,GAAYvC,GA9GtB,SAAsBwC,GACpB,MAAMC,EAASlC,SAASC,eAAe,UACjCkC,EAAenC,SAASC,eAAe,oBAE7CR,EAAewC,EACfC,EAAOhC,YAAc+B,EAAa,uBAAyB,oBAC3DC,EAAO/B,UAAY,WAAU8B,EAAa,SAAW,YACrDE,EAAajC,YAAc+B,EAAa,kBAAoB,kBAC9D,CAuGIG,CAAaJ,GAGbK,OAAOC,KAAKC,MAAM,CAAEC,QAAQ,EAAMC,eAAe,IAASH,IACpDA,EAAK,GAAGR,IACVO,OAAOC,KAAKI,YAAYJ,EAAK,GAAGR,GAAI,CAClCa,KAAM,oBACNC,QAASZ,GAEb,GACA,IAGJhC,SAASC,eAAe,eAAgB2B,iBAAiB,QAASH,GAGlE7B,IACAU,IAGAuC,YAAYvC,EAAa,IAAK,G","sources":["webpack://macro-engine-activity-tracker/./src/popup.ts"],"sourcesContent":["import { UserEvent } from './types';\n\nlet isCollecting = true;\nlet serverStatus = 'checking';\n\n// Update UI based on collection state\nfunction updateStatus(collecting: boolean) {\n  const status = document.getElementById('status')!;\n  const toggleButton = document.getElementById('toggleCollection')!;\n  \n  isCollecting = collecting;\n  status.textContent = collecting ? 'Collecting events...' : 'Collection paused';\n  status.className = `status ${collecting ? 'active' : 'inactive'}`;\n  toggleButton.textContent = collecting ? 'Stop Collection' : 'Start Collection';\n}\n\n// Format timestamp\nfunction formatTime(timestamp: string): string {\n  return new Date(timestamp).toLocaleTimeString();\n}\n\n// Add event to UI\nfunction addEvent(event: UserEvent) {\n  const eventsDiv = document.getElementById('events')!;\n  const eventDiv = document.createElement('div');\n  eventDiv.className = 'event';\n  \n  eventDiv.innerHTML = `\n    <div class=\"event-type\">${event.event_type}</div>\n    <div class=\"event-time\">${formatTime(event.timestamp)}</div>\n    <div class=\"event-url\">${event.url}</div>\n  `;\n  \n  eventsDiv.insertBefore(eventDiv, eventsDiv.firstChild);\n}\n\n// Check server status\nasync function checkServerStatus() {\n  try {\n    const response = await fetch('http://localhost:3000/api/events');\n    if (response.ok) {\n      serverStatus = 'connected';\n      document.getElementById('serverStatus')!.textContent = 'Server: Connected';\n      document.getElementById('serverStatus')!.className = 'server-status connected';\n    } else {\n      throw new Error('Server responded with error');\n    }\n  } catch (error) {\n    serverStatus = 'disconnected';\n    document.getElementById('serverStatus')!.textContent = 'Server: Disconnected';\n    document.getElementById('serverStatus')!.className = 'server-status disconnected';\n    console.error('Server connection error:', error);\n  }\n}\n\n// Fetch events from API\nasync function fetchEvents() {\n  if (serverStatus !== 'connected') {\n    await checkServerStatus();\n    if (serverStatus !== 'connected') return;\n  }\n\n  try {\n    const response = await fetch('http://localhost:3000/api/events');\n    const data = await response.json();\n    \n    const eventsDiv = document.getElementById('events')!;\n    eventsDiv.innerHTML = '';\n    \n    data.events.forEach((event: UserEvent) => addEvent(event));\n  } catch (error) {\n    console.error('Error fetching events:', error);\n    serverStatus = 'disconnected';\n    document.getElementById('serverStatus')!.textContent = 'Server: Disconnected';\n    document.getElementById('serverStatus')!.className = 'server-status disconnected';\n  }\n}\n\n// Clear events\nasync function clearEvents() {\n  if (serverStatus !== 'connected') {\n    await checkServerStatus();\n    if (serverStatus !== 'connected') {\n      alert('Cannot clear events: Server is not connected');\n      return;\n    }\n  }\n\n  try {\n    const response = await fetch('http://localhost:3000/api/events', { \n      method: 'DELETE' \n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to clear events');\n    }\n    \n    const eventsDiv = document.getElementById('events')!;\n    eventsDiv.innerHTML = '';\n  } catch (error) {\n    console.error('Error clearing events:', error);\n    alert('Failed to clear events. Please try again.');\n  }\n}\n\n// Initialize popup\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Add server status element\n  const statusDiv = document.createElement('div');\n  statusDiv.id = 'serverStatus';\n  statusDiv.className = 'server-status checking';\n  statusDiv.textContent = 'Server: Checking...';\n  document.body.insertBefore(statusDiv, document.body.firstChild);\n\n  // Set up event listeners\n  document.getElementById('toggleCollection')!.addEventListener('click', () => {\n    const newState = !isCollecting;\n    updateStatus(newState);\n    \n    // Send message to content script\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      if (tabs[0].id) {\n        chrome.tabs.sendMessage(tabs[0].id, { \n          type: 'TOGGLE_COLLECTION', \n          enabled: newState \n        });\n      }\n    });\n  });\n  \n  document.getElementById('clearEvents')!.addEventListener('click', clearEvents);\n  \n  // Initial server check and fetch\n  checkServerStatus();\n  fetchEvents();\n  \n  // Refresh events every 5 seconds\n  setInterval(fetchEvents, 5000);\n});\n"],"names":["isCollecting","serverStatus","async","checkServerStatus","fetch","ok","Error","document","getElementById","textContent","className","error","console","fetchEvents","response","data","json","innerHTML","events","forEach","event","eventsDiv","eventDiv","createElement","timestamp","event_type","Date","toLocaleTimeString","url","insertBefore","firstChild","addEvent","clearEvents","method","alert","addEventListener","statusDiv","id","body","newState","collecting","status","toggleButton","updateStatus","chrome","tabs","query","active","currentWindow","sendMessage","type","enabled","setInterval"],"sourceRoot":""}