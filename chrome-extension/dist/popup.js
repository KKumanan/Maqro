(()=>{"use strict";let e="checking";function t(e){const t=document.getElementById("status"),n=document.getElementById("toggleCollection");t.textContent=e?"Collecting events...":"Collection Paused",t.className="status "+(e?"active":"inactive"),n.textContent=e?"Stop Collection":"Start Collection"}async function n(){const t=document.getElementById("serverStatus");if(t)try{if(!(await fetch("http://localhost:3000/api/events")).ok)throw new Error("Server responded with error");e="connected",t.textContent="Server: Connected",t.className="server-status connected"}catch(n){e="disconnected",t.textContent="Server: Disconnected",t.className="server-status disconnected",console.error("Server connection error:",n)}}async function o(){const t=document.getElementById("events");if(t)if("connected"===e||(await n(),"connected"===e))try{const e=await fetch("http://localhost:3000/api/events");if(!e.ok)throw new Error(`API error: ${e.status} ${await e.text()}`);const n=await e.json();t.innerHTML="",n.events&&Array.isArray(n.events)&&n.events.length>0?n.events.forEach((e=>function(e){var t;const n=document.getElementById("events");if(!n)return;const o=document.createElement("div");var r;o.className="event",o.innerHTML=`\n    <div class="event-type">${e.event_type}</div>\n    <div class="event-time">${r=e.timestamp,new Date(r).toLocaleTimeString()}</div>\n    <div class="event-url">${e.url}</div>\n  `,(n.firstChild&&"No events to display."===n.firstChild.textContent||"Could not fetch events."===(null===(t=n.firstChild)||void 0===t?void 0:t.textContent))&&(n.innerHTML=""),n.insertBefore(o,n.firstChild)}(e))):t.textContent="No events to display."}catch(n){console.error("Error fetching events:",n.message),e="disconnected";const o=document.getElementById("serverStatus");o&&(o.textContent="Server: Disconnected",o.className="server-status disconnected"),t.textContent="Could not fetch events."}else t.textContent="Server disconnected. Cannot fetch events."}async function r(){const t=document.getElementById("events");if(t)if("connected"===e||(await n(),"connected"===e))try{const e=await fetch("http://localhost:3000/api/events",{method:"DELETE"});if(!e.ok)throw new Error(`Failed to clear events: ${e.status} ${await e.text()}`);t.innerHTML="No events to display.",console.log("Events cleared from server and UI")}catch(e){console.error("Error clearing events:",e.message),alert("Failed to clear events. Please try again.")}else alert("Cannot clear events: Server is not connected")}document.addEventListener("DOMContentLoaded",(()=>{const e=document.getElementById("toggleCollection"),s=document.getElementById("clearEvents");if(!document.getElementById("serverStatus")){const e=document.createElement("div");e.id="serverStatus",e.className="server-status checking",e.textContent="Server: Checking...",document.body.insertBefore(e,document.body.firstChild)}chrome.runtime.sendMessage({type:"GET_OPERATIONAL_STATE"},(e=>{if(chrome.runtime.lastError)return console.error("Error getting initial operational state:",chrome.runtime.lastError.message),void t(!0);e&&"boolean"==typeof e.isCollecting?t(e.isCollecting):(console.error("Invalid response for GET_OPERATIONAL_STATE:",e),t(!0))})),e.addEventListener("click",(()=>{const n=!("Stop Collection"===(e.textContent||""));t(n),chrome.runtime.sendMessage({type:"TOGGLE_COLLECTION",enabled:n},(e=>{chrome.runtime.lastError?(console.error("Error toggling collection state:",chrome.runtime.lastError.message),t(!n)):e&&e.success&&"boolean"==typeof e.isCollecting?(console.log("Collection state successfully updated by background to:",e.isCollecting),t(e.isCollecting)):(console.error("Background failed to confirm toggle or invalid response:",e),t(!n))}))})),s.addEventListener("click",r),n(),o(),setInterval(o,5e3)}))})();
//# sourceMappingURL=popup.js.map