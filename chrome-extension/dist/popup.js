(()=>{"use strict";let e=!0,t=!1;function n(e){console.log("Maqro Popup:",e)}function o(e){const t=document.getElementById("status"),n=document.getElementById("toggleCollection");t.textContent=e?"Collecting events...":"Collection Paused",t.className="status "+(e?"active":"inactive"),n.textContent=e?"Stop Collection":"Start Collection"}async function s(){const e=document.getElementById("serverStatus");try{const n=await fetch("http://localhost:3000/api/events");t=n.ok,e.textContent=t?"Server: Connected":"Server: Error",e.className="server-status "+(t?"connected":"disconnected")}catch(n){t=!1,e.textContent="Server: Disconnected",e.className="server-status disconnected"}}async function c(){const e=document.getElementById("events");if(t)try{const t=await fetch("http://localhost:3000/api/events");if(!t.ok)throw new Error(`HTTP ${t.status}`);const n=await t.json();e.innerHTML="",n.events&&n.events.length>0?n.events.slice(0,50).forEach((e=>function(e){const t=document.getElementById("events"),n=document.createElement("div");var o;n.className="event",n.innerHTML=`\n    <div class="event-type">${e.event_type}</div>\n    <div class="event-time">${o=e.timestamp,new Date(o).toLocaleTimeString()}</div>\n    <div class="event-url">${e.url}</div>\n  `,t.insertBefore(n,t.firstChild)}(e))):e.textContent="No events to display."}catch(t){n(`Failed to load events: ${t}`),e.textContent="Failed to load events."}else e.textContent="Server disconnected. Cannot load events."}async function a(){if(t)try{const e=await fetch("http://localhost:3000/api/events",{method:"DELETE"});if(!e.ok)throw new Error(`HTTP ${e.status}`);document.getElementById("events").innerHTML="No events to display.",n("Events cleared")}catch(e){n(`Failed to clear events: ${e}`),alert("Failed to clear events. Please try again.")}else alert("Cannot clear events: Server is not connected")}function l(){const t=!e;chrome.runtime.sendMessage({type:"TOGGLE_COLLECTION",enabled:t},(s=>{chrome.runtime.lastError?n(`Toggle failed: ${chrome.runtime.lastError.message}`):s&&s.success&&"boolean"==typeof s.isCollecting?(e=s.isCollecting,o(e),n("Collection "+(e?"enabled":"disabled"))):(e=t,o(e),n(`Collection ${e?"enabled":"disabled"} (fallback)`))}))}document.addEventListener("DOMContentLoaded",(()=>{const n=document.getElementById("toggleCollection"),i=document.getElementById("clearEvents");chrome.runtime.sendMessage({type:"GET_STATE"},(t=>{t&&t.success&&(e=t.isCollecting,o(e))})),n.addEventListener("click",l),i.addEventListener("click",a),s().then((()=>{t&&c()})),setInterval((()=>{s().then((()=>{t&&c()}))}),15e3)})),n("Popup initialized")})();
//# sourceMappingURL=popup.js.map