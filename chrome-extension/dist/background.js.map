{"version":3,"file":"background.js","mappings":"mBAGA,MAAMA,EAAS,CACbC,YAAa,mCACbC,cAAc,GAIhBC,OAAOC,QAAQC,YAAYC,aAAY,KACrCC,QAAQC,IAAI,6BAA6B,IAI3CL,OAAOC,QAAQK,UAAUH,aAAY,CAACI,EAAkBC,EAAQC,K,MAC9DL,QAAQC,IAAI,0BAA2BE,GAElB,eAAjBA,EAAQG,MAAyBH,EAAQI,MAU/CC,eAA+BD,GAC7B,GAAKd,EAAOE,aAKZ,IACEK,QAAQC,IAAI,8BAA+BM,GAG3C,MAAME,QAAiBC,MAAMjB,EAAOC,YAAa,CAC/CiB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEC,OAAQ,CAACT,OAGlC,IAAKE,EAASQ,GACZ,MAAM,IAAIC,MAAM,8BAA8BT,EAASU,UAGzD,MAAMC,QAAeX,EAASY,OAC9BrB,QAAQC,IAAI,iCAAkCmB,EAChD,CAAE,MAAOE,GACPtB,QAAQsB,MAAM,6BAA8BA,EAC9C,MAxBEtB,QAAQC,IAAI,oCAyBhB,CApCIsB,CAAgBpB,EAAQI,OACE,sBAAjBJ,EAAQG,OACjBb,EAAOE,aAA8B,QAAf,EAAAQ,EAAQqB,eAAO,SACrCxB,QAAQC,IAAI,qCAAsCR,EAAOE,cACzDU,EAAa,CAAEoB,SAAS,IAC1B,IAkCF7B,OAAO8B,KAAKC,UAAU5B,aAAY,CAAC6B,EAAOC,EAAYC,K,MAC1B,aAAtBD,EAAWV,SAAgC,QAAP,EAAAW,EAAIC,WAAG,eAAEC,WAAW,WAC1DhC,QAAQC,IAAI,2CAA4C2B,GAExDhC,OAAOqC,UAAUC,cAAc,CAC7BC,OAAQ,CAAEP,SACVQ,MAAO,CAAC,gBACPC,MAAK,KACNrC,QAAQC,IAAI,+CAEZL,OAAO8B,KAAKY,YAAYV,EAAO,CAC7BtB,KAAM,oBACNkB,QAAS/B,EAAOE,cAChB,IACD4C,OAAMjB,IACPtB,QAAQsB,MAAM,wCAAyCA,EAAM,IAEjE,IAIF1B,OAAO4C,OAAOC,UAAU1C,aAAa+B,IAC/BA,EAAIY,KACN9C,OAAO8B,KAAKY,YAAYR,EAAIY,GAAI,CAAEpC,KAAM,oBAAqBkB,SAAU/B,EAAOE,eAC9EF,EAAOE,cAAgBF,EAAOE,aAChC,IAIFC,OAAO+C,KAAKC,eAAe7C,aAAa8C,IACtC7C,QAAQC,IAAI,+BAAgC4C,GAC9B,SAAVA,EACFpD,EAAOE,cAAe,EACH,WAAVkD,IACTpD,EAAOE,cAAe,EACxB,IAIFC,OAAOkD,QAAQC,eAAehD,aAAaiD,IACzChD,QAAQC,IAAI,iCAAkC+C,GAC1CA,IAAapD,OAAOkD,QAAQG,eAC9BxD,EAAOE,cAAe,EAEtBF,EAAOE,cAAe,CACxB,G","sources":["webpack://macro-engine-activity-tracker/./src/background.ts"],"sourcesContent":["import { UserEvent, Message } from './types';\n\n// Configuration\nconst config = {\n  apiEndpoint: 'http://localhost:3000/api/events',\n  isCollecting: true\n};\n\n// Initialize\nchrome.runtime.onInstalled.addListener(() => {\n  console.log('Maqro: Extension installed');\n});\n\n// Handle messages from content script\nchrome.runtime.onMessage.addListener((message: Message, sender, sendResponse) => {\n  console.log('Maqro: Received message', message);\n  \n  if (message.type === 'USER_EVENT' && message.event) {\n    handleUserEvent(message.event);\n  } else if (message.type === 'TOGGLE_COLLECTION') {\n    config.isCollecting = message.enabled ?? false;\n    console.log('Maqro: Collection state changed to', config.isCollecting);\n    sendResponse({ success: true });\n  }\n});\n\n// Handle user events\nasync function handleUserEvent(event: UserEvent) {\n  if (!config.isCollecting) {\n    console.log('Maqro: Event collection is paused');\n    return;\n  }\n\n  try {\n    console.log('Maqro: Sending event to API', event);\n    \n    // Send event directly to API\n    const response = await fetch(config.apiEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ events: [event] }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`API responded with status: ${response.status}`);\n    }\n\n    const result = await response.json();\n    console.log('Maqro: Event sent successfully', result);\n  } catch (error: any) {\n    console.error('Maqro: Error sending event', error);\n  }\n}\n\n// Handle tab updates to inject content script\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n  if (changeInfo.status === 'complete' && tab.url?.startsWith('http')) {\n    console.log('Maqro: Injecting content script into tab', tabId);\n    \n    chrome.scripting.executeScript({\n      target: { tabId },\n      files: ['content.js']\n    }).then(() => {\n      console.log('Maqro: Content script injected successfully');\n      // Send current collection state to content script\n      chrome.tabs.sendMessage(tabId, { \n        type: 'TOGGLE_COLLECTION', \n        enabled: config.isCollecting \n      });\n    }).catch(error => {\n      console.error('Maqro: Error injecting content script', error);\n    });\n  }\n});\n\n// Handle extension icon click\nchrome.action.onClicked.addListener((tab) => {\n  if (tab.id) {\n    chrome.tabs.sendMessage(tab.id, { type: 'TOGGLE_COLLECTION', enabled: !config.isCollecting });\n    config.isCollecting = !config.isCollecting;\n  }\n});\n\n// Handle idle state\nchrome.idle.onStateChanged.addListener((state) => {\n  console.log('Maqro: Idle state changed to', state);\n  if (state === 'idle') {\n    config.isCollecting = false;\n  } else if (state === 'active') {\n    config.isCollecting = true;\n  }\n});\n\n// Handle window focus changes\nchrome.windows.onFocusChanged.addListener((windowId) => {\n  console.log('Maqro: Window focus changed to', windowId);\n  if (windowId === chrome.windows.WINDOW_ID_NONE) {\n    config.isCollecting = false;\n  } else {\n    config.isCollecting = true;\n  }\n});\n  "],"names":["config","apiEndpoint","isCollecting","chrome","runtime","onInstalled","addListener","console","log","onMessage","message","sender","sendResponse","type","event","async","response","fetch","method","headers","body","JSON","stringify","events","ok","Error","status","result","json","error","handleUserEvent","enabled","success","tabs","onUpdated","tabId","changeInfo","tab","url","startsWith","scripting","executeScript","target","files","then","sendMessage","catch","action","onClicked","id","idle","onStateChanged","state","windows","onFocusChanged","windowId","WINDOW_ID_NONE"],"sourceRoot":""}