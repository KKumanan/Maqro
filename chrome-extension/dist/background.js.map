{"version":3,"file":"background.js","mappings":"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","sources":["webpack://macro-engine-activity-tracker/./src/background.ts"],"sourcesContent":["import { UserEvent, Message } from './types';\n\n// Configuration\nconst config = {\n  apiEndpoint: 'http://localhost:3000/api/events',\n  isCollecting: true\n};\n\n// Batching and Storage Configuration\nconst STORAGE_KEY_EVENTS = 'maqroUserEvents';\nconst ALARM_NAME_BATCH_SEND = 'maqroBatchSendAlarm';\nconst BATCH_SEND_INTERVAL_MINUTES = 5; // Send batch every 5 minutes\nconst STORAGE_LIMIT_THRESHOLD_PERCENT = 0.8; // Send if 80% of storage is used\nconst STORAGE_QUOTA_BYTES = chrome.storage.local.QUOTA_BYTES || 5 * 1024 * 1024; // 5MB\n\nlet isSendingBatch = false; // Flag to prevent concurrent batch sends\n\n// Initialize\nchrome.runtime.onInstalled.addListener(() => {\n  console.log('Maqro: Extension installed/updated. Setting up alarm.');\n  // Ensure alarm is set up\n  chrome.alarms.get(ALARM_NAME_BATCH_SEND, (existingAlarm) => {\n    if (!existingAlarm) {\n      chrome.alarms.create(ALARM_NAME_BATCH_SEND, {\n        periodInMinutes: BATCH_SEND_INTERVAL_MINUTES,\n      });\n      console.log('Maqro: Batch send alarm created.');\n    } else {\n      console.log('Maqro: Batch send alarm already exists.');\n    }\n  });\n});\n\n// Ensure alarm exists on service worker startup (alarms persist but good to check)\nchrome.alarms.get(ALARM_NAME_BATCH_SEND, (alarm) => {\n    if (!alarm) {\n        console.log('Maqro: Alarm not found on startup, creating.');\n        chrome.alarms.create(ALARM_NAME_BATCH_SEND, { periodInMinutes: BATCH_SEND_INTERVAL_MINUTES });\n    }\n});\n\n// Listen for the alarm\nchrome.alarms.onAlarm.addListener((alarm) => {\n  if (alarm.name === ALARM_NAME_BATCH_SEND) {\n    console.log('Maqro: Batch send alarm triggered.');\n    sendBatchToServer();\n  }\n});\n\n// Handle messages from content script\nchrome.runtime.onMessage.addListener((message: Message, sender, sendResponse) => {\n  console.log('Maqro: Received message', message);\n  \n  if (message.type === 'USER_EVENT' && message.event) {\n    handleUserEvent(message.event);\n  } else if (message.type === 'TOGGLE_COLLECTION') {\n    config.isCollecting = message.enabled ?? false;\n    console.log('Maqro: Collection state changed to', config.isCollecting);\n    sendResponse({ success: true });\n    if (!config.isCollecting) {\n        // If collection is stopped, try to send any pending events\n        console.log('Maqro: Collection stopped, attempting to send any pending events.');\n        sendBatchToServer();\n    }\n  }\n});\n\n// Store user events locally instead of sending immediately\nasync function handleUserEvent(event: UserEvent) {\n  if (!config.isCollecting) {\n    console.log('Maqro: Event collection is paused (handleUserEvent)');\n    return;\n  }\n\n  try {\n    const result = await chrome.storage.local.get(STORAGE_KEY_EVENTS);\n    const existingEvents: UserEvent[] = result[STORAGE_KEY_EVENTS] || [];\n    existingEvents.push(event);\n    await chrome.storage.local.set({ [STORAGE_KEY_EVENTS]: existingEvents });\n    console.log('Maqro: Event stored locally. Total stored:', existingEvents.length);\n    checkStorageUsageAndSend(); // Check if we need to send early\n  } catch (error: any) {\n    console.error('Maqro: Error storing event locally', error);\n  }\n}\n\n// Check storage usage and trigger early send if needed\nfunction checkStorageUsageAndSend() {\n  chrome.storage.local.getBytesInUse([STORAGE_KEY_EVENTS], (bytesInUse) => {\n    if (chrome.runtime.lastError) {\n      console.error('Maqro: Error getting bytes in use:', chrome.runtime.lastError.message);\n      return;\n    }\n    console.log(`Maqro: Storage used for events: ${bytesInUse} bytes / ${STORAGE_QUOTA_BYTES} bytes`);\n    if (bytesInUse / STORAGE_QUOTA_BYTES > STORAGE_LIMIT_THRESHOLD_PERCENT) {\n      console.log('Maqro: Storage limit threshold reached. Triggering early batch send.');\n      sendBatchToServer();\n    }\n  });\n}\n\n// Send batched events to the server\nasync function sendBatchToServer() {\n  if (isSendingBatch) {\n    console.log('Maqro: Batch send already in progress. Skipping.');\n    return;\n  }\n  isSendingBatch = true;\n\n  try {\n    const result = await chrome.storage.local.get(STORAGE_KEY_EVENTS);\n    const eventsToSend: UserEvent[] = result[STORAGE_KEY_EVENTS] || [];\n\n    if (eventsToSend.length === 0) {\n      console.log('Maqro: No events to send.');\n      isSendingBatch = false;\n      return;\n    }\n\n    console.log(`Maqro: Attempting to send batch of ${eventsToSend.length} events.`);\n    \n    const response = await fetch(config.apiEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ events: eventsToSend }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`API responded with status: ${response.status} ${await response.text()}`);\n    }\n\n    const responseData = await response.json();\n    console.log('Maqro: Event batch sent successfully', responseData);\n\n    // Clear the successfully sent events from storage\n    await chrome.storage.local.remove(STORAGE_KEY_EVENTS);\n    console.log('Maqro: Local events cleared after successful send.');\n\n  } catch (error: any) {\n    console.error('Maqro: Error sending event batch:', error.message, error.stack);\n    // Events remain in storage for the next attempt\n  } finally {\n    isSendingBatch = false;\n  }\n}\n\n// Handle tab updates to inject content script\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n  if (changeInfo.status === 'complete' && tab.url?.startsWith('http')) {\n    console.log('Maqro: Injecting content script into tab', tabId);\n    \n    chrome.scripting.executeScript({\n      target: { tabId },\n      files: ['content.js']\n    }).then(() => {\n      console.log('Maqro: Content script injected successfully');\n      // Send current collection state to content script\n      chrome.tabs.sendMessage(tabId, { \n        type: 'TOGGLE_COLLECTION', \n        enabled: config.isCollecting \n      });\n    }).catch(error => {\n      console.error('Maqro: Error injecting content script', error);\n    });\n  }\n});\n\n// Handle extension icon click\nchrome.action.onClicked.addListener((tab) => {\n  if (tab.id) {\n    chrome.tabs.sendMessage(tab.id, { type: 'TOGGLE_COLLECTION', enabled: !config.isCollecting });\n    config.isCollecting = !config.isCollecting;\n  }\n});\n\n// Handle idle state\nchrome.idle.onStateChanged.addListener((state) => {\n  console.log('Maqro: Idle state changed to', state);\n  if (state === 'idle') {\n    config.isCollecting = false;\n  } else if (state === 'active') {\n    config.isCollecting = true;\n  }\n});\n\n// Handle window focus changes\nchrome.windows.onFocusChanged.addListener((windowId) => {\n  console.log('Maqro: Window focus changed to', windowId);\n  if (windowId === chrome.windows.WINDOW_ID_NONE) {\n    config.isCollecting = false;\n  } else {\n    config.isCollecting = true;\n  }\n});\n  "],"names":["config","apiEndpoint","isCollecting","STORAGE_KEY_EVENTS","ALARM_NAME_BATCH_SEND","STORAGE_QUOTA_BYTES","chrome","storage","local","QUOTA_BYTES","isSendingBatch","async","sendBatchToServer","console","log","eventsToSend","get","length","response","fetch","method","headers","body","JSON","stringify","events","ok","Error","status","text","responseData","json","remove","error","message","stack","runtime","onInstalled","addListener","alarms","existingAlarm","create","periodInMinutes","alarm","onAlarm","name","onMessage","sender","sendResponse","type","event","existingEvents","push","set","getBytesInUse","bytesInUse","lastError","handleUserEvent","enabled","success","tabs","onUpdated","tabId","changeInfo","tab","url","startsWith","scripting","executeScript","target","files","then","sendMessage","catch","action","onClicked","id","idle","onStateChanged","state","windows","onFocusChanged","windowId","WINDOW_ID_NONE"],"sourceRoot":""}